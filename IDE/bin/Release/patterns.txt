Callback.addCallback("~c~", function(~c~){
    ~c~
})¶Callback.addCallback¶

TileEntity.registerPrototype(BlockID.~c~, {
    defaultValues: {
        ~c~
    },
    
    tick: function () {
        ~c~
    },
    
    getGuiScreen: function () {
        return ~c~;
    }
})¶TileEntity.registerPrototype¶

UI.StandartWindow({
    standart: {
        header: {
            text: {
                text: "~c~"
            }
        },
        
        inventory: {
            standart: true~c~
        },
        
        background: {
            standart: true~c~
        }
    },
    
    drawing: [
        ~c~
    ],
    
    elements: {
        ~c~
    }
})¶UI.StandartWindow¶

Item.registerUseFunction("~c~", function (coords, item, block) {
    ~c~
})¶Item.registerUseFunction¶

Item.registerDispenseFunction(id, function(coords, item) {
    ~c~
})¶Item.registerDispenseFunction¶

BlockRenderer.addRenderCallback(id, function(api, coords, block, _bool) { 
    ~c~
})¶BlockRenderer.addRenderCallback¶

Item.registerIconOverrideFunction(id, function(item) {
    return {name: "~c~", meta: 0};
})¶Item.registerIconOverrideFunction¶

Item.registerNoTargetUseFunction(id, function(item) {
    ~c~
})¶Item.registerNoTargetUseFunction¶

GameObject("~c~", {
    init: function(){
        ~c~
    },
    
    loaded: function(){
        ~c~
    },
    
    update: function(){
        ~c~
    }
})¶GameObject¶

Saver.addSavesScope("~c~",
    function read(scope) {
        if(scope&&scope.amount)
			~c~ = scope.amount;
		}
    },
    
    function save() {
        return {amount: ~c~};
    }
)¶Saver.addSavesScope¶

Item.registerUsingCompleteFunction("~c~", function(item) {
    ~c~
})¶Item.registerUsingCompleteFunction¶

Item.registerUsingReleasedFunction("~c~", function(item) {
    ~c~
})¶Item.registerUsingReleasedFunction¶

Block.setPrototype("~c~", {
    type: Block.TYPE_BASE,
    
    getVariations: function () {
        return [{name: "~c~", texture: [["~c~", 0]], inCreative: true}];
    },
    
    getDrop: function () {
        return [~c~];
    },
    
    getMaterial: function (a) {
        return "stone";
    },
    
    getDestroyLevel: function (a) {
        return 1;
    }
})¶Block.setPrototype¶

Saver.registerObjectSaver("~c~", {
    save: function(obj){
        return obj;
    },

    read: function(obj){
        return obj;
    }
})¶Saver.registerObjectSaver¶

Block.createBlock("~c~", [
{name: "~c~", texture: [["~c~", ~c~], ["~c~", ~c~], ["~c~", ~c~], ["~c~", ~c~], ["~c~", ~c~], ["~c~", ~c~]], inCreative: ~c~}
], "opaque")¶Block.createBlock¶

Block.createBlockWithRotation("~c~", [
{name: "~c~", texture: [["~c~", ~c~], ["~c~", ~c~], ["~c~", ~c~], ["~c~", ~c~], ["~c~", ~c~], ["~c~", ~c~]], inCreative: ~c~}
], "opaque")¶Block.createBlockWithRotation¶

Callback.addCallback("GenerateNetherChunk", function(x, z){
	let generator = function(inChunk, block, minY, maxY, size){
		for(var i = 0; i < inChunk; i++){
			let c = GenerationUtils.randomCoords(x, z, minY, maxY, BlockID[block], size);
			GenerationUtils.generateOre(c.x, c.y, c.z, BlockID[block], 0, Math.floor(Math.random() * (size - 1 + 1)) + 1);
		}
	}
})¶GenerateNetherChunk¶

Callback.addCallback("GenerateEndChunk", function(x, z){
    let generator = function(inChunk, block, minY, maxY, size){
		for(var i = 0; i < inChunk; i++){
			let c = GenerationUtils.randomCoords(x, z, minY, maxY, BlockID[block], size);
			GenerationUtils.generateOre(c.x, c.y, c.z, BlockID[block], 0, Math.floor(Math.random() * (size - 1 + 1)) + 1);
		}
	}
})¶GenerateEndChunk¶

Callback.addCallback("GenerateChunkUnderground", function(x, z){
    let generator = function(inChunk, block, minY, maxY, size){
		for(var i = 0; i < inChunk; i++){
			let c = GenerationUtils.randomCoords(x, z, minY, maxY, BlockID[block], size);
			GenerationUtils.generateOre(c.x, c.y, c.z, BlockID[block], 0, Math.floor(Math.random() * (size - 1 + 1)) + 1);
		}
	}
})¶GenerateChunkUnderground¶

Callback.addCallback("GenerateChunk", function(x, z){
    let generator = function(inChunk, block, minY, maxY, size){
		for(var i = 0; i < inChunk; i++){
			let c = GenerationUtils.randomCoords(x, z, minY, maxY, BlockID[block], size);
			GenerationUtils.generateOre(c.x, c.y, c.z, BlockID[block], 0, Math.floor(Math.random() * (size - 1 + 1)) + 1);
		}
	}
})¶GenerateChunk¶

Callback.addCallback("tick", function(){
    ~c~
})¶tick¶

Callback.addCallback("LevelSelected", function(){
    ~c~
})¶LevelSelected¶

Callback.addCallback("LevelLoaded", function(){
    ~c~
})¶LevelLoaded¶

Callback.addCallback("DestroyBlock", function(coords, block, player){
    ~c~
})¶DestroyBlock¶

Callback.addCallback("Explosion", function(coords, params){
    ~c~
})¶Explosion¶

Callback.addCallback("ClientChat", function(str){
    ~c~
})¶ClientChat¶

Callback.addCallback("NativeCommand", function(str){
    ~c~
})¶NativeCommand¶

Callback.addCallback("ItemUse", function(coords, item, block){
    let x = coords.relative.x;
    let y = coords.relative.y;
    let z = coords.relative.z;
    ~c~
})¶ItemUse¶

Callback.addCallback("ItemUse", function(coords, item, block){
    let x = coords.relative.x;
    let y = coords.relative.y;
    let z = coords.relative.z;
    if(item.id == 280){
        ~c~
    }
})¶Super-Palka¶

Callback.addCallback("PlayerAttack", function(player, entity){
    ~c~
})¶PlayerAttack¶


Callback.addCallback("EntityDeath", function(entity){
    ~c~
})¶EntityDeath¶


Callback.addCallback("EntityHurt", function(attacker, victim, damage){
    ~c~
})¶EntityHurt¶


Callback.addCallback("PostLoaded", function(){
    ~c~
})¶PostLoaded¶