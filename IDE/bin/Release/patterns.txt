Callback.addCallback("~c~", function(){
    
});Callback.addCallback;

TileEntity.registerPrototype(BlockID.~c~, {
    defaultValues: {
        
    },
    
    tick: function () {
        
    },
    
    getGuiScreen: function () {
        return 
    }
});TileEntity.registerPrototype;

UI.StandartWindow({
    standart: {
        header: {
            text: {
                text: "~c~"
            }
        },
        
        inventory: {
            standart: true
        },
        
        background: {
            standart: true
        }
    },
    
    drawing: [
        
    ],
    
    elements: {
        
    }
});UI.StandartWindow;

Item.registerUseFunction("~c~", function (coords, item, block) {
    
});Item.registerUseFunction;

Item.registerDispenseFunction(id, function(coords, item) {
    
});Item.registerDispenseFunction;

BlockRenderer.addRenderCallback(id, function(api, coords, block, _bool) { 
    
});BlockRenderer.addRenderCallback;

Item.registerIconOverrideFunction(id, function(item) {
    return {name: "~c~", meta: 0}
});Item.registerIconOverrideFunction;

Item.registerNoTargetUseFunction(id, function(item) {
    
});Item.registerNoTargetUseFunction;

GameObject("~c~", {
    init: function(){
        
    },
    
    loaded: function(){
        
    },
    
    update: function(){
        
    }
});GameObject;

Saver.addSavesScope("~c~",
    function read(scope) {
        
    },
    
    function save() {
        return scope
    }
);Saver.addSavesScope;

Item.registerUsingCompleteFunction("~c~", function(item) {
    
});Item.registerUsingCompleteFunction;

Item.registerUsingReleasedFunction("~c~", function(item) {
    
});Item.registerUsingReleasedFunction;

Block.setPrototype("~c~", {
    type: Block.TYPE_BASE,
    
    getVariations: function () {
        return [{name: "", texture: [["", 0]], inCreative: true}]
    },
    
    getDrop: function () {
        return []
    },
    
    getMaterial: function (a) {
        return "stone"
    },
    
    getDestroyLevel: function (a) {
        return 1
    }
});Block.setPrototype;

Saver.registerObjectSaver("~c~", {
    save: function(obj){
        return obj
    },

    read: function(obj){
        return obj
    }
});Saver.registerObjectSaver;