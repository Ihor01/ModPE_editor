ModAPI - это мощная библиотека методов, добавляемая ModCore и позволяющая легко добавлять инструменты, руды, генерацию структур и многое другое, однако чтобы ей воспользоваться вы должны иметь хотя-бы базовые знания в ModPE.


ПОДКЛЮЧЕНИЕ МЕТОДОВ MODAPI
Для того, чтобы воспользоваться методами ModAPI нужно скопировать этот код в начало скрипта:

var scripts = net.zhuoweizhang.mcpelauncher.ScriptManager.scripts;
var ScriptableObject = org.mozilla.javascript.ScriptableObject;

for(var i = 0; i < scripts.size(); i++){
 script = scripts.get(i);
 scope = script.scope;
 if(script.name.split(' ')[0]=="ModCore"){ //Если первое слово в имени скрипта - ModCore
  var ModAPI = ScriptableObject.getProperty(scope, "ModAPI");
  var ToolMaterial = ScriptableObject.getProperty(scope, "ToolMaterial");
  var ToolType = ScriptableObject.getProperty(scope, "ToolType");
  var random = ScriptableObject.getProperty(scope, "random");
  var drop = ScriptableObject.getProperty(scope, "drop");
  var translate = ScriptableObject.getProperty(scope, "translate");
 }
}

Вы можете убрать получение каких-то методов или наоборот подключить какие-либо массивы данных из ModCore. И кстати, этот код вы можете использовать для получения методов из любого скрипта.


ДОБАВЛЕНИЕ БЛОКОВ И ПРЕДМЕТОВ
1) Добавление перевода:
ModAPI.addTranslation("имя на английском", {язык1: "перевод", язык2: "перевод", ...)
Названия языков записываются в краткой форме (ru, de, fr и т. п.) или названиями майнкрафта, если нужен разный перевод на варианты одного языка. Например en_US для перевода на американский английский.
 После добавления перевода, вы можете перевести имя на выбранный язык, используя метод translate("имя на английском")


2) Методы для добавления блоков

ModAPI.defineBlock(id, имя, текстуры, {type: тип, opacity: false/true, render: тип рендера, inCreative: false/true});

Автоматически переводит имя блока. Первые 3 аргумента такие же, как в Block.defineBlock.

Далее идёт массив со свойствами блока, писать его и все свойства в нём не обязательно.
opacity - непрозрачность, по умолчанию включена.
inCreative - добавлять ли блок в креатив. По умолчанию не добавляет.

type - тип блока
В ModCore есть 5 типов, они влияют на то, каким инструментом добывается блок:
"dirt" - блоки, добываемые лопатой
"stone" - блоки, добываемые киркой
"wood" - блоки, добываемые топором
"glass" - стекло
"leaves" - листва (добывается ножницами)
Но можно присвоить свой тип и сделать инструмент, добывающий его.
Для установки типа блоку так же можно использовать метод
ModAPI.setBlockType(id, тип)

В Block.defineBlock можно прописать похожесть на какое-то id, которая ставит лишь часть его свойств (майнкравтовский тип блока). Так как в майнкрафте типов немного, я не стал делать отдельный параметр, вместо этого тип stone ставит похожесть на камень, а тип wood ставит похожесть на дерево, и вместо типа можно прописать id, похожесть на который установится блоку.

Для добавления блока с дамагами есть метод ModAPI.defineDamageBlock, он аналогичен ModAPI.defineBlock, но вместо 6 текстур на дамаг вам надо прописать только одну. Если включить добавление в креатив, добавятся все дамаги.

Если у блока тип камня, то его можно добыть, только если его уровень меньше или равен уровню инструмента. У любого блока, который вы добавите, по умолчанию уровень 0. Его можно изменить методом
ModAPI.setBlockLevel(id, level)
Уровни кирок из майнкрафта: 
0 - деревянная
1 - каменная
2 - железная
3 - алмазная

По умолчанию блоки дропают сами себя, если инструмент может их добыть, чтобы сделать кастомный дроп блоку надо воспользоваться методом:
ModAPI.setCustomBlockDrop(id, function(x,y,z, itemID, itemDmg, blockDmg, toolLvl, enchant){
//Действие при ломании блока
});
enchant - объект, в который записан результат проверки наличия зачарований "Шёлковое касание" и "Удача" на инструменте, сломавшем блок. Имеет два значения:
enchant.type - тип зачарования инструмента, "silk_touch" - шёлковое касание, "fortune" - удача. Если на инструменте оба зачарования, то записывается только шёлковое касание.
enchant.level - уровень зачарования (если зачарования нет, то равен 0)


3) Методы для добавления предметов:
Все эти методы автоматически переводят название и добавляют предмет в креатив. Очень похожи на методы блоклаунчера, но есть новые аргументы.

ModAPI.setItem(id, textureName, textureData, name, maxStack, category)
Ставит категорию прописанную в category, если же её не написать, то ставиться чётвёртая категория (ItemCategory.MATERIAL)

ModAPI.setFoodItem(id, textureName, textureData, saturation, name, maxStack)

ModAPI.defineArmor(id, textureName, textureData, name, armorTexture, shield, maxDmg, armorType, [craftId, craftData])
Последний аргумент - это ингредиент крафта брони. Его можно не написать, и тогда рецепт не добавиться.



СОЗДАНИЕ ИНСТРУМЕНТА
1) Добавление инструмента:

ModAPI.setTool(ID, textureName, textureData, name, ToolType, ToolMaterial, ID2)

Первые 4 аргумента (ID, texture_name, texture_data, name) те же, что и в добавлении предмета.

ToolType - это тип инструмента.
Список типов инструментов:
Меч - ToolType.sword
Лопата - ToolType.shovel
Кирка - ToolType.pickaxe
Топор - ToolType.axe
Мотыга - ToolType.hoe

ToolMaterial - это материал, из которого сделан инструмент. От него зависят все свойства инструмента.
Список материалов:
Дерево - ToolMaterial.WOOD
Камень - ToolMaterial.STONE
Железо - ToolMaterial.IRON
Золото - ToolMaterial.GOLD
Алмаз - ToolMaterial.DIAMOND

ID2 - это ID предмета, в который превратится инструмент при ломании. Если хотите, чтобы инструмент просто ломался, ничего не пишите.


2) Добавление своего материала для инструмента:

ModAPI.addToolMaterial("имя", {ID:ид, data:дата, maxDmg: прочность, level: уровень инструмента, miningSpeed: скорость добычи, damage: урон, fire: поджог мобов, enchantability: зачаровываемость, enchantment: [тип, уровень]});

Теперь поподробнее о том, что означают аргументы в этих методах:

maxDmg - прочность

damage - урон материала, который прибавится к базовому урону инструмента.

level - уровень инструмента

minigSpeed - скорость добычи (число, на которое разделиться время ломания)

Остальные параметры являются дополнительными, их писать не обязательно:

ID, data - ид и дата предмета, из которого добавится крафт инструментам из этого материала.

fire - время горения мобов после удара инструментом

enchantability - модификатор зачаровываемости. Чем он больше, тем больше вероятность получения хороших зачарований.

enchantment - массив с типом и уровнем зачарования, которое будет работать на инструменте. Сюда можно написать либо тип "silk_touch" (шёлковое касание), либо тип "fortune" (удача)

Как видите свойств довольно много. Чтобы сделать, например, аналог алмазной кирки, но с большой прочностью, вам надо знать её свойства, их можно посмотреть массиве ToolMaterial в коде ModCore, там записаны свойства материалов всех майнкрафтовских инструментов.

Кстати, свойства инструмента можно писать сразу, не добавляя материал, что может быть полезно, когда надо добавить уникальный инструмент, а не комплект.


3) Добавление своего типа инструмента.
ModAPI.setCustomToolType("имя", {
 damage: базовый урон, //доп. параметр
 destroyTool: false/true,
 blockTypes: [типы блоков, которые инструмент может добыть], 
 enchantType: тип зачарования, //доп. параметр
 craftRecipe: [recipe], //доп. параметр
 attackHook: function(a, v){ }, //доп. параметр
 startDestroyBlock: function(x, y ,z, side, itemID, itemDmg, blockID, block){ }, //доп. параметр
 destroyBlock: function(x, y, z, side, itemID, itemDmg, blockID, blockDmg, block){ }, //доп. параметр
 useItem: function(x, y, z, itemID, blockID, side, itemDmg, blockDmg){ } //доп. параметр
});

craftRecipe - стандартный рецепт. Здесь прописывается расположение ингредиентов, как при добавлении рецепта, например ["aaa", " b ", " b "] - это стандартный рецепт кирки, a - ингредиент, указываемый при добавлении инструмента, b - палка.

attackHook происходит при ударе инструментом
startDestroyBlock, destroyBlock и useItem это функции, выполняющиеся при начале ломания блока, ломании блока и нажатии на блок инструментом соответственно. Чтобы отменить стандартный дроп, надо прописать Level.destroyBlock. Параметр block в этих функциях - это объект со свойствами ломаевого блока. Содержит следующие данные:
block.type - тип
block.level - уровень
block.time - время ломания
block.drop(x,y,z, itemID, itemDmg, blockDmg, toolLevel, enchant) - функция дропа с блока

destroyTool - будет ли ломаться инструмент при достижении максимальной даты, если нет, то он перестанет работать на максимальной дате. Таким образом можно сделать заряжаемые инструмент.



ГЕНЕРАЦИЯ В МИРЕ
1) Функции для генерации:
oreGeneration(x,z) - генерация руд (работает только когда игрок под землёй)
worldGeneration(x,z) - в обычном мире
netherGeneration(x,z) - в аду
endGeneration(x,z) - в эндер мире
x и z - это координаты начала чанка, а значит конец чанка имеет координаты x+15, z+15.

2) Методы для генерации руд:
ModAPI.genOreNormal(id, data, id2, maxY, x,z)
Генерация средних жил (~9 блоков) руды под землёй. Размер жилы: 7 - 11 блоков.

ModAPI.genOreSmall(id, data, id2, maxY, x,z)
Генерация маленьких жил (~3.5 блоков) руды под землёй. Размер жилы: 1-8 блоков

ModAPI.genOreTiny(id, data, id2, maxY, x,z)
Генерация одиночных месторождений руды (1-2 блока) под землёй

id, data - руда
id2 - ID блока, который руда будет заменять
maxY - максимальная высота (максимум 62)
x,z - координаты чанка (не трогать)


ДРУГИЕ МЕТОДЫ
ModAPI.destroyItem(damage) - уменьшение прочности на damage единиц с сохранением зачарований и имени. При достижении макс дамага ломает предмет.

random(min, max) - случайное число от min до max

drop(x,y,z, id, count, data) - метод для дропа с блоков, дропает предмет на координатах x+0.5, y+0.5, z+0.5 (центр блока) count раз.