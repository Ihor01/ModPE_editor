getCoreAPILevel()
runOnMainThread(func)
Debug.addParticle(x, y, z, id, vx, vy, vz, data)
Debug.message(message)
Debug.warning(message)
Debug.error(message)

FileTools.mntdir [type=string value=/mnt ]
FileTools.root [type=string value=/storage/emulated/0/ ]
FileTools.workdir [type=string value=games/com.mojang/coreengine/ ]
FileTools.moddir [type=string value=games/com.mojang/mods/ ]
FileTools.mkdir(dir)
FileTools.mkworkdirs()
FileTools.getFullPath(path)
FileTools.isExists(path)
FileTools.WriteText(file, text, add)
FileTools.ReadText(file)
FileTools.WriteImage(file, bitmap)
FileTools.ReadImage(file)
FileTools.ReadTextAsset(name)
FileTools.ReadImageAsset(name)
FileTools.ReadBytesAsset(name)
FileTools.GetListOfDirs(path)
FileTools.GetListOfFiles(path, ext)
FileTools.ReadKeyValueFile(dir, specialSeparator)
FileTools.WriteKeyValueFile(dir, data, specialSeparator)
FileTools.ReadJSON(dir)
FileTools.WriteJSON(dir, obj, beautify)

Logger.MAX_BUFFER_LEN [type=number value=1024 ]
Logger.CORE [type=string value=core.log ]
Logger.MOD [type=string value=mods.log ]
Logger.shared [type=string value=]
Logger.hasErrorMessages [type=boolean value=false ]
Logger.wipe(log)
Logger.buffer [... not api, possibly data value ...]
Logger.message(log, message)
Logger.flush(log)
Logger.formatLog(log)
Logger.showAsDialog(title, paragraf)
Logger.Log(msg, prefix, log)
Logger.LogError(error, log)
Logger.getFormattedTime(showDate)
Logger.getShared()
Logger.getFormattedLog()
Logger.checkErrors()

Translation.currentLanguage [... not api, possibly data value ...]
Translation.allTranslations [... not api, possibly data value ...]
Translation.refreshLanguage()
Translation.addTranslation(original, lang)
Translation.getLanguage()
Translation.translate(original)
Translation.translateSentence(str)
Translation.translateItem(name)
Translation.translateAllItems()

Threading.threads [... not api, possibly data value ...]
Threading.formatFatalErrorMessage(error, name, priority, formatFunc)
Threading.initThread(name, func, priority, isErrorFatal, formatFunc)
Threading.getThread(name)

UI.Container(tileEntity)
UI.WindowProvider.windows [... not api, possibly data value ...]
UI.WindowProvider.lastOpenID [type=number value=1 ]
UI.WindowProvider.refreshInventorySource()
UI.WindowProvider.addWindow(window)
UI.WindowProvider.removeWindow(window)
UI.WindowProvider.openWindow(window)
UI.WindowProvider.closeWindow(window)
UI.WindowProvider.threadID [type=number value=0 ]
UI.WindowProvider.backgroundThreadPriority [type=number value=0 ]
UI.WindowProvider.renderThreadPriority [type=number value=-17 ]
UI.WindowProvider.threadRunning [type=boolean value=false ]
UI.WindowProvider.setThreadPriority(priority)
UI.WindowProvider.setRenderThreadPriority(priority)
UI.WindowProvider.StartThread()
UI.WindowProvider.ThreadFunc(id)
UI.WindowProvider.Frame(callingThreadID)
UI.WindowProvider.threadStack [... not api, possibly data value ...]
UI.WindowProvider.ExecInThread(func)
UI.WindowProvider.StopThread()
UI.WindowProvider.touchEvent [... not api, possibly data value ...]
UI.WindowProvider.registerTouchEvent(window, event)
UI.WindowProvider.onClick(x, y, isLong)
UI.WindowProvider.Images [... not api, possibly data value ...]
UI.WindowProvider.BitmapCache.cache [... not api, possibly data value ...]
UI.WindowProvider.BitmapCache.getScaled(name, scale)
UI.WindowProvider.BitmapCache.getSized(name, width, height)
UI.WindowProvider.BitmapCache.getScaledForRaw(bitmap, scale)


UI.WindowCore()
UI.ElementProvider(window)
UI.Window(content)
UI.WindowGroup()
UI.StandartWindow(content)
UI.Utils.colorPaint [java object: android.graphics.Paint]
UI.Utils.textPaint [java object: android.graphics.Paint]
UI.Utils.iconPaint [java object: android.graphics.Paint]
UI.Utils.GetDisplaySize()
UI.Utils.Run(func)
UI.Utils.GetGuiAssetName(fileName)
UI.Utils.FastScale(bitmap, scale)
UI.Utils.GetFrame(_width, _height, name, scale, background)
UI.Utils.createBitmapByMatrix(bitmap, matrix, size)
UI.Utils.genBlockTexture(textures, shape, size)

UI.run(func)
UI.getMcContext()
UI.testUI(ui)
UI.openUI(ui)
UI.addIconOverride(name1, name2)
UI.addItemOverride(id, data, name)
UI.registerBitmap(name, bitmap)
UI.requireBitmap(name)
UI.getBitmapFromCache(name)
UI.getScreenHeight()
UI.checkAndPlacehold(name, width, height)

UpdatableAPI.updatableList [... not api, possibly data value ...]
UpdatableAPI.uniqueUpdatableMap [... not api, possibly data value ...]
UpdatableAPI.uniqueUpdatableID [type=number value=1 ]
UpdatableAPI.maximumCalls [type=number value=128 ]
UpdatableAPI.setMaxUpdateCalls(count)
UpdatableAPI.addUpdatable(updatable)
UpdatableAPI.removeUpdatable(updatable)
UpdatableAPI.isInUpdate(updatable)
UpdatableAPI.removeUpdatableFast(updatable)
UpdatableAPI.removesUpdatableByID(id)
UpdatableAPI.getUpdatable(uuID)
UpdatableAPI.previousPosition [type=number value=0 ]
UpdatableAPI.updateAll()
UpdatableAPI.resetEngine()
UpdatableAPI.Updatable(func)

Updatable.updatableList [... not api, possibly data value ...]
Updatable.uniqueUpdatableMap [... not api, possibly data value ...]
Updatable.uniqueUpdatableID [type=number value=1 ]
Updatable.maximumCalls [type=number value=128 ]
Updatable.setMaxUpdateCalls(count)
Updatable.addUpdatable(updatable)
Updatable.removeUpdatable(updatable)
Updatable.isInUpdate(updatable)
Updatable.removeUpdatableFast(updatable)
Updatable.removesUpdatableByID(id)
Updatable.getUpdatable(uuID)
Updatable.previousPosition [type=number value=0 ]
Updatable.updateAll()
Updatable.resetEngine()
Updatable.Updatable(func)

UpdatableSaver.saverPrototypes [... not api, possibly data value ...]
UpdatableSaver.registerPrototype(name, Prototype)
UpdatableSaver.attachSaverPrototype(updatable, name)
UpdatableSaver.readUpdatable(data)
UpdatableSaver.readUpdatableByPrototype(TYPE, data)
UpdatableSaver.writeUpdatable(updatable)
UpdatableSaver.saveAllUpdatables(saverScope)
UpdatableSaver.readAllUpdatables(saverScope)

TileEntity.tileEntityPrototypes [... not api, possibly data value ...]
TileEntity.tileEntityList [... not api, possibly data value ...]
TileEntity.resetEngine()
TileEntity.registerPrototype(blockID, customPrototype)
TileEntity.getPrototype(blockID)
TileEntity.isTileEntityBlock(blockID)
TileEntity.createTileEntityForPrototype(Prototype, addToUpdate)
TileEntity.addTileEntity(x, y, z)
TileEntity.addUpdatableAsTileEntity(updatable)
TileEntity.getTileEntity(x, y, z)
TileEntity.destroyTileEntity(tileEntity)
TileEntity.destroyTileEntityAtCoords(x, y, z)
TileEntity.CheckTileEntities()
TileEntity.DeployDestroyChecker(tileEntity)

MobRegistry.mobPrototypes [... not api, possibly data value ...]
MobRegistry.loadedEntities [... not api, possibly data value ...]
MobRegistry.registerPrototype(name, customPrototype)
MobRegistry.createEntityUpdatable(prototypeName, addToUpdate)
MobRegistry.registerUpdatableAsEntity(updatable)
MobRegistry.spawnEntityAsPrototype(prototypeName, coords, extraData)
MobRegistry.getEntityUpdatable(entity)
MobRegistry.registerNativeEntity(entity)
MobRegistry.registerEntityRemove(entity)
MobRegistry.callPlayerAttack(attacker, victim)

Callback.callbacks [... not api, possibly data value ...]
Callback.formatCallbackError(name, error)
Callback.addCallback(name, func, mod)
Callback.invokeCallback(name, par1, par2, par3, par4, par5, par6, par7, par8, par9)

ModAPI.modAPIs [... not api, possibly data value ...]
ModAPI.registerAPI(name, api, descr)
ModAPI.requireAPI(name)
ModAPI.requireGlobal(name)
ModAPI.requireAPIdoc(name)
ModAPI.requireAPIPropertyDoc(name, prop)
ModAPI.getModByName(modName)
ModAPI.isModLoaded(modName)
ModAPI.addAPICallback(apiName, func)
ModAPI.addModCallback(modName, func)
ModAPI.cloneAPI(api, deep)

Saver.saverScopes [... not api, possibly data value ...]
Saver.addSavesScope(name, loadFunc, saveFunc)
Saver.onAllLoaded(globalScope)
Saver.onAllSaved(globalScope)

World.isLoaded [type=boolean value=false ]
World.setLoaded(isLoaded)
World.isWorldLoaded()
World.getThreadTime()
World.__inworld.nativeSetBlock(x, y, z, id, data)
World.__inworld.nativeGetBlockID(x, y, z)
World.__inworld.nativeGetBlockData(x, y, z)
World.__inworld.setBlock(x, y, z, id, data)
World.__inworld.setFullBlock(x, y, z, fullTile)
World.__inworld.getBlock(x, y, z)
World.__inworld.getBlockID(x, y, z)
World.__inworld.getBlockData(x, y, z)
World.__inworld.destroyBlock(x, y, z, drop)
World.__inworld.getLightLevel(x, y, z)
World.__inworld.getTileEntity(x, y, z)
World.__inworld.addTileEntity(x, y, z)
World.__inworld.removeTileEntity(x, y, z)
World.__inworld.getContainer(x, y, z)
World.__inworld.getWorldTime()
World.__inworld.setWorldTime(time)
World.__inworld.setDayMode(day)
World.__inworld.setNightMode(night)
World.__inworld.getWeather()
World.__inworld.setWeather(weather)
World.__inworld.drop(x, y, z, id, count, data)
World.__inworld.explode(x, y, z, power, someBoolean)
World.__inworld.getBiome(x, z)
World.__inworld.getBiomeName(x, z)
World.__inworld.getGrassColor(x, z)
World.__inworld.setGrassColor(x, z, color)
World.__inworld.getGrassColorRGB(x, z)
World.__inworld.setGrassColorRGB(x, z, rgb)
World.__inworld.canSeeSky(x, y, z)
World.__inworld.playSound(x, y, z, name, volume, pitch)
World.__inworld.playSoundAtEntity(entity, name, volume, pitch)

World.__inmenu.nativeSetBlock()
World.__inmenu.nativeGetBlockID()
World.__inmenu.nativeGetBlockData(x, y, z)
World.__inmenu.setBlock(x, y, z, id, data)
World.__inmenu.setFullBlock(x, y, z, fullTile)
World.__inmenu.getBlock(x, y, z)
World.__inmenu.getBlockID(x, y, z)
World.__inmenu.getBlockData(x, y, z)
World.__inmenu.destroyBlock(x, y, z, drop)
World.__inmenu.getLightLevel(x, y, z)
World.__inmenu.getTileEntity(x, y, z)
World.__inmenu.addTileEntity(x, y, z)
World.__inmenu.removeTileEntity(x, y, z)
World.__inmenu.getContainer(x, y, z)
World.__inmenu.getWorldTime()
World.__inmenu.setWorldTime(time)
World.__inmenu.setDayMode(day)
World.__inmenu.setNightMode(night)
World.__inmenu.getWeather()
World.__inmenu.setWeather(weather)
World.__inmenu.drop(x, y, z, id, count, data)
World.__inmenu.explode(x, y, z, power, someBoolean)
World.__inmenu.getBiome(x, z)
World.__inmenu.getBiomeName(x, z)
World.__inmenu.getGrassColor(x, z)
World.__inmenu.setGrassColor(x, z, color)
World.__inmenu.getGrassColorRGB(x, z)
World.__inmenu.setGrassColorRGB(x, z, rgb)
World.__inmenu.canSeeSky(x, y, z)
World.__inmenu.playSound(x, y, z, name, volume, pitch)
World.__inmenu.playSoundAtEntity(entity, name, volume, pitch)

World.nativeSetBlock()
World.nativeGetBlockID()
World.nativeGetBlockData(x, y, z)
World.setBlock(x, y, z, id, data)
World.setFullBlock(x, y, z, fullTile)
World.getBlock(x, y, z)
World.getBlockID(x, y, z)
World.getBlockData(x, y, z)
World.destroyBlock(x, y, z, drop)
World.getLightLevel(x, y, z)
World.getTileEntity(x, y, z)
World.addTileEntity(x, y, z)
World.removeTileEntity(x, y, z)
World.getContainer(x, y, z)
World.getWorldTime()
World.setWorldTime(time)
World.setDayMode(day)
World.setNightMode(night)
World.getWeather()
World.setWeather(weather)
World.drop(x, y, z, id, count, data)
World.explode(x, y, z, power, someBoolean)
World.getBiome(x, z)
World.getBiomeName(x, z)
World.getGrassColor(x, z)
World.setGrassColor(x, z, color)
World.getGrassColorRGB(x, z)
World.setGrassColorRGB(x, z, rgb)
World.canSeeSky(x, y, z)
World.playSound(x, y, z, name, volume, pitch)
World.playSoundAtEntity(entity, name, volume, pitch)

Entity._AI.base(entity, data)
Entity._AI.idle(entity, data)
Entity._AI.follow(entity, data)
Entity._AI.attack(entity, data)
Entity._AI.panic(entity, data)

Entity.getAll()
Entity.getAllJS()
Entity.getExtra(ent, name)
Entity.putExtra(ent, name, extra)
Entity.getExtraJson(ent, name)
Entity.putExtraJson(ent, name, obj)
Entity.addEffect(ent, effectId, effectTime, effectData, amplifier, particles)
Entity.clearEffect(ent, id)
Entity.clearEffects(ent)
Entity.damageEntity(ent, damage)
Entity.healEntity(ent, heal)
Entity.getType(ent)
Entity.setHitbox(ent, w, h)
Entity.isExist(entity)
Entity.spawn(x, y, z, type, skin)
Entity.spawnCustom(name, x, y, z, extra)
Entity.spawnCustomAtCoords(name, coords, extra)
Entity.spawnAtCoords(coords, type, skin)
Entity.remove(entity)
Entity.getCustom(entity)
Entity.getAge(ent)
Entity.setAge(ent, age)
Entity.getSkin(ent)
Entity.setSkin(ent, skin)
Entity.getRender(ent)
Entity.setRender(ent, render)
Entity.rideAnimal(ent1, ent2)
Entity.getNameTag(ent)
Entity.setNameTag(ent, tag)
Entity.getTarget(ent)
Entity.setTarget(ent, target)
Entity.setMobile(ent, mobile)
Entity.getSneaking(ent)
Entity.setSneaking(ent, sneak)
Entity.getRider(ent)
Entity.getRiding(ent)
Entity.setFire(ent, fire)
Entity.health(entity)
Entity.getHealth(ent)
Entity.setHealth(ent, health)
Entity.getMaxHealth(ent)
Entity.setMaxHealth(ent, health)
Entity.setPosition(ent, x, y, z)
Entity.getPosition(ent)
Entity.addPosition(ent, x, y, z)
Entity.setVelocity(ent, x, y, z)
Entity.getVelocity(ent)
Entity.addVelocity(ent, x, y, z)
Entity.getDistanceBetweenCoords(coords1, coords2)
Entity.getDistanceToCoords(ent, coords)
Entity.getDistanceToEntity(ent1, ent2)
Entity.getLookAngle(ent)
Entity.setLookAngle(ent, yaw, pitch)
Entity.getLookVectorByAngle(angle)
Entity.getLookVector(ent)
Entity.getLookAt(ent, x, y, z)
Entity.lookAt(ent, x, y, z)
Entity.lookAtCoords(ent, coords)
Entity.moveToTarget(ent, target, params)
Entity.moveToAngle(ent, angle, params)
Entity.moveToLook(ent, params)
Entity.getMovingVector(ent)
Entity.getMovingAngle(ent)
Entity.findNearest(coords, type, maxRange)
Entity.getAllInRange(coords, maxRange, type)
Entity.getInventory(ent, handleNames, handleEnchant)
Entity.getProjectileItem(projectile)

Player.get()
Player.getNameForEnt(ent)
Player.getName()
Player.getDimension()
Player.isPlayer(ent)
Player.getPointed()
Player.getInventory(loadPart, handleEnchant, handleNames)
Player.getCarriedItem()
Player.setCarriedItem(id, count, data)
Player.decreaseCarriedItem(count)
Player.setPosition(x, y, z)
Player.getPosition()
Player.addPosition(x, y, z)
Player.setVelocity(x, y, z)
Player.getVelocity()
Player.addVelocity(x, y, z)
Player.experience()
Player.getExperience()
Player.setExperience(exp)
Player.addExperience(exp)
Player.level()
Player.getLevel()
Player.setLevel(level)
Player.addLevel(level)
Player.flying()
Player.getFlyingEnabled()
Player.setFlyingEnabled(enabled)
Player.getFlying()
Player.setFlying(enabled)
Player.exhaustion()
Player.getExhaustion()
Player.setExhaustion(value)
Player.hunger()
Player.getHunger()
Player.setHunger(value)
Player.saturation()
Player.getSaturation()
Player.setSaturation(value)
Player.health()
Player.getHealth()
Player.setHealth(value)
Player.score()
Player.getScore()

Render(renderParams)
Game.prevent()
Game.message(msg)
Game.tipMessage(msg)
Game.dialogMessage(message, title)
Game.setDifficulty(difficulty)
Game.getDifficulty()
Game.getI18n(str)
Game.getMinecraftVersion()
Game.getEngineVersion()
Game.selectLevel(name)
Game.setCamera(entity)
Game.setTickingSpeed(speed)
Game.setRenderDebug(enabled)
Game.screenshot(name)

GenerationUtils.TERRAIN [... not api, possibly data value ...]
GenerationUtils.TRANSPARENT [... not api, possibly data value ...]
GenerationUtils.isTerrainBlock(id)
GenerationUtils.isTransparentBlock(id)
GenerationUtils.randomXZ(cx, cz)
GenerationUtils.randomCoords(cx, cz, lowest, highest)
GenerationUtils.findSurface(x, y, z)
GenerationUtils.findHighSurface(x, z)
GenerationUtils.findLowSurface(x, z)
GenerationUtils.__lockedReal [... not api, possibly data value ...]
GenerationUtils.lockInBlock(id, data, checkerTile, checkerMode)
GenerationUtils.setLockedBlock(x, y, z)
GenerationUtils.genMinable(x, y, z, params)

Animation.base(x, y, z)
Animation.Base(x, y, z)
Animation.text(x, y, z, text)
Animation.Text(x, y, z, text)
Animation.item(x, y, z)
Animation.Item(x, y, z)

Particles.addParticle(x, y, z, id, vx, vy, vz, data)
Particles.line(particle, coords1, coords2, gap, vel, data)

IDRegistry.uniqueID [... not api, possibly data value ...]
IDRegistry.data [... not api, possibly data value ...]
IDRegistry.reversedData [... not api, possibly data value ...]
IDRegistry.loadDataFromStatic(data)
IDRegistry.genUniqueID(name, mode)
IDRegistry.genItemID(name)
IDRegistry.genBlockID(name)
IDRegistry.genMiscID(name)
IDRegistry.getNameByID(id)
IDRegistry.addedInCreative [... not api, possibly data value ...]
IDRegistry.requireCreativeAdd(id, data)

IDData [... not api, possibly data value ...]
ItemID [... not api, possibly data value ...]
BlockID [... not api, possibly data value ...]
Block.idSource [... not api, possibly data value ...]
Block.dropFunctions [... not api, possibly data value ...]
Block.DEFAULT_ICON_RESOLUTION [type=number value=96 ]
Block.setGuiIconParams(canGenerate, size)
Block.createBlock(namedID, defineData, blockType)
Block.createBlockWithRotation(namedID, defineData, blockType)
Block.isNativeTile(id)
Block.registerDropFunctionForID(numericID, dropFunc, level)
Block.registerDropFunction(namedID, dropFunc, level)
Block.defaultDropFunction(blockCoords, blockID, blockData, diggingLevel)
Block.getDropFunction(id)
Block.setDestroyLevelForID(id, level)
Block.setDestroyLevel(namedID, level)
Block.onBlockDestroyed(coords, fullTile)
Block.getBlockDropViaItem(block, item, coords)
Block.placeFuncs [... not api, possibly data value ...]
Block.registerPlaceFunction(namedID, func)
Block.registerPlaceFunctionForID(block, func)
Block.getPlaceFunc(block)
Block.setBlockShape(id, pos1, pos2, data)
Block.createSpecialType(description)

Item.idSource [... not api, possibly data value ...]
Item.useFunctions [... not api, possibly data value ...]
Item.throwableFunctions [... not api, possibly data value ...]
Item.createItem(namedID, name, texture, params)
Item.createFoodItem(namedID, name, texture, params)
Item.createFuelItem(namedID, name, texture, params)
Item.createArmorItem(namedID, name, texture, params)
Item.createThrowableItem(namedID, name, texture, params)
Item.isNativeItem(id)
Item.getMaxDamage(id)
Item.getMaxStack(id)
Item.getCustomThrowableRenderType(id)
Item.getName(id, data, encode)
Item.getTextureCoords(id, data)
Item.getUseAnimation(id)
Item.isValid(id, data)
Item.describeItem(namedID, description)
Item.setCategory(id, category)
Item.setEnchantType(id, enchant, value)
Item.setToolRender(id, enabled)
Item.setMaxDamage(id, maxdamage)
Item.setStackedByData(id, enabled)
Item.setProperties(id, props)
Item.setUseAnimation(id, animType)
Item.registerUseFunctionForID(numericID, useFunc)
Item.registerUseFunction(namedID, useFunc)
Item.onItemUsed(coords, item, block)
Item.registerThrowableFunctionForID(numericID, useFunc)
Item.registerThrowableFunction(namedID, useFunc)
Item.onProjectileHit(projectile, item, target)

Recipes.addShaped(result, mask, data, func, prefix)
Recipes.addShapedNative(id, count, data, mask, data2, func, prefix)
Recipes.addShapeless(result, data, func, prefix)
Recipes.deleteRecipe(item)
Recipes.replaceWithShaped(result, mask, data, func, prefix)
Recipes.replaceWithShapeless(result, data, func, prefix)
Recipes.getFieldContainer(slots)
Recipes.getRecipeByField(slots, prefix, ignorePrefix)
Recipes.getRecipeResult(slots, prefix)
Recipes.provideRecipe(slots, prefix)
Recipes.getWorkbenchUI()
Recipes.getRecipesByResult(id, count, data)
Recipes.furnaceRecipes [... not api, possibly data value ...]
Recipes.isFurnaceAdded [type=boolean value=false ]
Recipes.addFurnace(source, resultID, resultData, prefix, isLocked)
Recipes.addFurnaceNative(source, resultID, resultData)
Recipes.addAllFurnaceRecipes()
Recipes.doesFurnacePrefixesMatch(recipePrefix, actionPrefix)
Recipes.getFurnaceRecipeResult(itemId, prefix)
Recipes.removeFurnaceRecipe(itemId)

ToolAPI.blockMaterials [... not api, possibly data value ...]
ToolAPI.toolMaterials [... not api, possibly data value ...]
ToolAPI.toolData [... not api, possibly data value ...]
ToolAPI.blockData [... not api, possibly data value ...]
ToolAPI.addBlockMaterial(name, breakingMultiplier)
ToolAPI.addToolMaterial(name, material)
ToolAPI.registerTool(id, toolMaterial, blockMaterials, params)
ToolAPI.registerSword(id, toolMaterial, params)
ToolAPI.registerBlockMaterial(uid, materialName, level)
ToolAPI.registerBlockDiggingLevel(uid, level)
ToolAPI.registerBlockMaterialAsArray(materialName, UIDs)
ToolAPI.destroyTimeData [... not api, possibly data value ...]
ToolAPI.refresh()
ToolAPI.getBlockData(blockID)
ToolAPI.getBlockMaterial(blockID)
ToolAPI.getBlockDestroyLevel(blockID)
ToolAPI.getDestroyTimeViaTool(fullBlock, toolID)
ToolAPI.getToolData(itemID)
ToolAPI.getToolLevel(itemID)
ToolAPI.getToolLevelViaBlock(itemID, blockID)
ToolAPI.getCarriedToolData()
ToolAPI.getCarriedToolLevel()
ToolAPI.startDestroyHook(coords, block, carried)
ToolAPI.destroyBlockHook(coords, block, carried)
ToolAPI.LastAttackTime [type=number value=0 ]
ToolAPI.playerAttackHook(attackerPlayer, victimEntity, carried)
ToolAPI.resetEngine()
ToolAPI.DestoryBlockFix [... not api, possibly data value ...]

Armor.armorFuncs [... not api, possibly data value ...]
Armor.registerFuncsForID(item, funcs)
Armor.registerFuncs(namedID, funcs)
Armor.getForSlot(slot)
Armor.tickCallback()
Armor.hurtCallback(attacker, damage)

LiquidRegistry.liquids [... not api, possibly data value ...]
LiquidRegistry.registerLiquid(key, name, uiTextures, modelTextures)
LiquidRegistry.getLiquidData(key)
LiquidRegistry.isExists(key)
LiquidRegistry.getLiquidName(key)
LiquidRegistry.getLiquidUITexture(key, width, height)
LiquidRegistry.getLiquidUIBitmap(key, width, height)
LiquidRegistry.FullByEmpty [... not api, possibly data value ...]
LiquidRegistry.EmptyByFull [... not api, possibly data value ...]
LiquidRegistry.registerItem(liquid, empty, full)
LiquidRegistry.getEmptyItem(id, data)
LiquidRegistry.getItemLiquid(id, data)
LiquidRegistry.getFullItem(id, data, liquid)
LiquidRegistry.Storage(tileEntity)

Unlimited [... not api, possibly data value ...]
